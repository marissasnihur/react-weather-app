{"ast":null,"code":"import _classCallCheck from \"/Users/marissasnihur/Desktop/weather-in-the-universe-marissasnihur/react-weather-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/marissasnihur/Desktop/weather-in-the-universe-marissasnihur/react-weather-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/marissasnihur/Desktop/weather-in-the-universe-marissasnihur/react-weather-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/marissasnihur/Desktop/weather-in-the-universe-marissasnihur/react-weather-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/marissasnihur/Desktop/weather-in-the-universe-marissasnihur/react-weather-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/marissasnihur/Desktop/weather-in-the-universe-marissasnihur/react-weather-app/src/App.js\";\n\n/*\nThis is the root level component that brings in and renders the entire React application. It contains\nan internal state, high level styling, and the declartion of the application's' hierarchy.\n\nchangeDisplayCity:\n  When this function is triggered, it will perform 2 network calls to retrieve data. For each\n  set of returning data, we will set update this component's state with the new information which\n  in turn will trigger a re-render of the UI.\n\ncomponentDidMount:\n  This is one of many React component's lifecycle method. After the render cycle of a component, we\n  want to fetch the weather information for the DEFAULT_CITY and display it after the page is fully\n  initialized.\n\nonCitySelectionChanged:\n  This function is being passed down to <CitySelection> as a prop. Upon the change of the dropdown\n  selection, the component will trigger this function which in turn allow us to relay the trigger\n  to `changeDisplayCity`. Obtaining the user selected value out of the dropdown is critical, so we\n  will retrieve it by calling `event.target.value` which referenced to the event caller, in this\n  case the dropdown menu.\n\nrender:\n  This method in a React component is responsible for the rendering. Here we can describe what is\n  being rendered, and how information is being used.\n*/\nimport React, { Component } from 'react';\nimport WeatherCard from './containers/weatherCard';\nimport CitySelection from './components/citySelection/citySelection';\nimport { getWeatherByCity, getForecastByCity } from './utils/network';\nimport './App.scss';\nvar DEFAULT_CITY = 'edmonton';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      city: '',\n      temperature: '',\n      currentCondition: '' //forecast: [],\n\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"changeDisplayCity\",\n    value: function changeDisplayCity(city) {\n      var _this2 = this;\n\n      getWeatherByCity(city).then(function (response) {\n        console.log(response);\n\n        _this2.setState({\n          city: response.data.name,\n          temperature: Math.round(response.data.main.temp),\n          currentCondition: response.data.weather[0].description,\n          cityImage: response.data.photo\n        });\n      }); //     getForecastByCity(city).then((response) => {\n      //       this.setState({\n      //         forecast: response.data.list\n      //       })\n      //     });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.changeDisplayCity(DEFAULT_CITY);\n    }\n  }, {\n    key: \"onCitySelectionChanged\",\n    value: function onCitySelectionChanged(event) {\n      this.changeDisplayCity(event.target.value);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(WeatherCard, {\n        city: this.state.city,\n        temperature: this.state.temperature,\n        currentCondition: this.state.currentCondition,\n        cityImage: this.state.cityImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/marissasnihur/Desktop/weather-in-the-universe-marissasnihur/react-weather-app/src/App.js"],"names":["React","Component","WeatherCard","CitySelection","getWeatherByCity","getForecastByCity","DEFAULT_CITY","App","state","city","temperature","currentCondition","then","response","console","log","setState","data","name","Math","round","main","temp","weather","description","cityImage","photo","changeDisplayCity","event","target","value"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AAEA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,iBAApD;AAEA,OAAO,YAAP;AAEA,IAAMC,YAAY,GAAG,UAArB;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,WAAW,EAAE,EAFP;AAGNC,MAAAA,gBAAgB,EAAE,EAHZ,CAIN;;AAJM,K;;;;;;sCAOUF,I,EAAM;AAAA;;AACtBL,MAAAA,gBAAgB,CAACK,IAAD,CAAhB,CAAuBG,IAAvB,CAA4B,UAACC,QAAD,EAAc;AACxCC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,QAAA,MAAI,CAACG,QAAL,CAAc;AACZP,UAAAA,IAAI,EAAEI,QAAQ,CAACI,IAAT,CAAcC,IADR;AAEZR,UAAAA,WAAW,EAAES,IAAI,CAACC,KAAL,CAAWP,QAAQ,CAACI,IAAT,CAAcI,IAAd,CAAmBC,IAA9B,CAFD;AAGZX,UAAAA,gBAAgB,EAAEE,QAAQ,CAACI,IAAT,CAAcM,OAAd,CAAsB,CAAtB,EAAyBC,WAH/B;AAIZC,UAAAA,SAAS,EAAEZ,QAAQ,CAACI,IAAT,CAAcS;AAJb,SAAd;AAMD,OARD,EADsB,CAW1B;AACA;AACA;AACA;AACA;AACI;;;wCAEkB;AAClB,WAAKC,iBAAL,CAAuBrB,YAAvB;AACD;;;2CAEsBsB,K,EAAO;AAC5B,WAAKD,iBAAL,CAAuBC,KAAK,CAACC,MAAN,CAAaC,KAApC;AACD;;;6BAEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,WAAD;AACE,QAAA,IAAI,EAAE,KAAKtB,KAAL,CAAWC,IADnB;AAEE,QAAA,WAAW,EAAE,KAAKD,KAAL,CAAWE,WAF1B;AAGE,QAAA,gBAAgB,EAAE,KAAKF,KAAL,CAAWG,gBAH/B;AAIE,QAAA,SAAS,EAAE,KAAKH,KAAL,CAAWiB,SAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAUD;;;;EA7CexB,S;;AAgDlB,eAAeM,GAAf","sourcesContent":["/*\nThis is the root level component that brings in and renders the entire React application. It contains\nan internal state, high level styling, and the declartion of the application's' hierarchy.\n\nchangeDisplayCity:\n  When this function is triggered, it will perform 2 network calls to retrieve data. For each\n  set of returning data, we will set update this component's state with the new information which\n  in turn will trigger a re-render of the UI.\n\ncomponentDidMount:\n  This is one of many React component's lifecycle method. After the render cycle of a component, we\n  want to fetch the weather information for the DEFAULT_CITY and display it after the page is fully\n  initialized.\n\nonCitySelectionChanged:\n  This function is being passed down to <CitySelection> as a prop. Upon the change of the dropdown\n  selection, the component will trigger this function which in turn allow us to relay the trigger\n  to `changeDisplayCity`. Obtaining the user selected value out of the dropdown is critical, so we\n  will retrieve it by calling `event.target.value` which referenced to the event caller, in this\n  case the dropdown menu.\n\nrender:\n  This method in a React component is responsible for the rendering. Here we can describe what is\n  being rendered, and how information is being used.\n*/\n\nimport React, { Component } from 'react';\n\nimport WeatherCard from './containers/weatherCard';\nimport CitySelection from './components/citySelection/citySelection';\n\nimport { getWeatherByCity, getForecastByCity } from './utils/network';\n\nimport './App.scss';\n\nconst DEFAULT_CITY = 'edmonton';\n\nclass App extends Component {\n  state = {\n    city: '',\n    temperature: '',\n    currentCondition: '',\n    //forecast: [],\n  };\n\n  changeDisplayCity(city) {\n    getWeatherByCity(city).then((response) => {\n      console.log(response)\n      this.setState({\n        city: response.data.name,\n        temperature: Math.round(response.data.main.temp),\n        currentCondition: response.data.weather[0].description,\n        cityImage: response.data.photo\n      })\n    });\n\n//     getForecastByCity(city).then((response) => {\n//       this.setState({\n//         forecast: response.data.list\n//       })\n//     });\n   }\n\n  componentDidMount() {\n    this.changeDisplayCity(DEFAULT_CITY);\n  }\n\n  onCitySelectionChanged(event) {\n    this.changeDisplayCity(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <WeatherCard\n          city={this.state.city}\n          temperature={this.state.temperature}\n          currentCondition={this.state.currentCondition}\n          cityImage={this.state.cityImage}>\n        </WeatherCard>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}