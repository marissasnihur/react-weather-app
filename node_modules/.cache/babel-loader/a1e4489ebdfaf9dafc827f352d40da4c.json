{"ast":null,"code":"import _classCallCheck from \"/Users/marissasnihur/Desktop/weather-in-the-universe-marissasnihur/react-weather-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/marissasnihur/Desktop/weather-in-the-universe-marissasnihur/react-weather-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/marissasnihur/Desktop/weather-in-the-universe-marissasnihur/react-weather-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/marissasnihur/Desktop/weather-in-the-universe-marissasnihur/react-weather-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/marissasnihur/Desktop/weather-in-the-universe-marissasnihur/react-weather-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/marissasnihur/Desktop/weather-in-the-universe-marissasnihur/react-weather-app/src/containers/weatherCard.js\";\n\n/*\nThis is a standard React component responbile for holding the top & bottom portion of the weather\ncard. It also relays the click event on the card top, to toggle the active/inactive state which\nin return show or hide the forecast (bottom) weather card.\n\nArguably this component may not be needed if we distribute its parts to the parent and children\ncomponents. This approach can be viewed as optional, but I usually prefer better separations\nto achieve better code organizations.\n*/\nimport React from 'react';\nimport CardTitle from '../components/cityNameTitle/cityNameTitle';\nimport CardDescription from '../components/currentCondition/currentCondition';\nimport CardTemperature from '../components/temperature/temperature';\nimport generateForecasts from './helpers/generateForecast';\nimport './weatherCard.scss';\n\nvar WeatherCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WeatherCard, _React$Component);\n\n  function WeatherCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, WeatherCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WeatherCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      backgroundIsActive: false\n    };\n    return _this;\n  }\n\n  _createClass(WeatherCard, [{\n    key: \"onCardClick\",\n    value: function onCardClick() {\n      this.setState({\n        backgroundIsActive: !this.state.backgroundIsActive\n      });\n    }\n  }, {\n    key: \"getCardClassNames\",\n    value: function getCardClassNames() {\n      var classNames = 'card ';\n\n      if (this.state.backgroundIsActive) {\n        classNames += 'isActive';\n      }\n\n      return classNames;\n    }\n  }, {\n    key: \"render\",\n    value: function render(props) {\n      return React.createElement(\"div\", {\n        className: this.getCardClassNames(),\n        onClick: this.onCardClick.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cardUpperPortion\",\n        style: {\n          \"backgroundImage\": \"url(\".concat(this.props.cityImage, \")\")\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cardInfo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(CardTemperature, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, this.props.temperature, this.props.minMaxTemp, this.props.maxMaxTemp), React.createElement(CardDescription, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, this.props.currentCondition)), React.createElement(CardTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, this.props.city)));\n    }\n  }]);\n\n  return WeatherCard;\n}(React.Component);\n\n;\nexport default WeatherCard;","map":{"version":3,"sources":["/Users/marissasnihur/Desktop/weather-in-the-universe-marissasnihur/react-weather-app/src/containers/weatherCard.js"],"names":["React","CardTitle","CardDescription","CardTemperature","generateForecasts","WeatherCard","state","backgroundIsActive","setState","classNames","props","getCardClassNames","onCardClick","bind","cityImage","temperature","minMaxTemp","maxMaxTemp","currentCondition","city","Component"],"mappings":";;;;;;;AAAA;;;;;;;;;AAUA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,SAAP,MAAsB,2CAAtB;AACA,OAAOC,eAAP,MAA4B,iDAA5B;AACA,OAAOC,eAAP,MAA4B,uCAA5B;AAEA,OAAOC,iBAAP,MAA8B,4BAA9B;AAEA,OAAO,oBAAP;;IAEMC,W;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,kBAAkB,EAAE;AADd,K;;;;;;kCAIM;AACZ,WAAKC,QAAL,CAAc;AACZD,QAAAA,kBAAkB,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADpB,OAAd;AAGD;;;wCAEmB;AAClB,UAAIE,UAAU,GAAG,OAAjB;;AACA,UAAI,KAAKH,KAAL,CAAWC,kBAAf,EAAmC;AACjCE,QAAAA,UAAU,IAAI,UAAd;AACD;;AACD,aAAOA,UAAP;AACD;;;2BAEMC,K,EAAO;AACZ,aACE;AAAK,QAAA,SAAS,EAAE,KAAKC,iBAAL,EAAhB;AAA0C,QAAA,OAAO,EAAE,KAAKC,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAkC,QAAA,KAAK,EAAE;AAAC,2CAA0B,KAAKH,KAAL,CAAWI,SAArC;AAAD,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKJ,KAAL,CAAWK,WADd,EAEG,KAAKL,KAAL,CAAWM,UAFd,EAGG,KAAKN,KAAL,CAAWO,UAHd,CADF,EAME,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKP,KAAL,CAAWQ,gBADd,CANF,CADF,EAWE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKR,KAAL,CAAWS,IADd,CAXF,CADF,CADF;AAmBD;;;;EAvCuBnB,KAAK,CAACoB,S;;AAwC/B;AAED,eAAef,WAAf","sourcesContent":["/*\nThis is a standard React component responbile for holding the top & bottom portion of the weather\ncard. It also relays the click event on the card top, to toggle the active/inactive state which\nin return show or hide the forecast (bottom) weather card.\n\nArguably this component may not be needed if we distribute its parts to the parent and children\ncomponents. This approach can be viewed as optional, but I usually prefer better separations\nto achieve better code organizations.\n*/\n\nimport React from 'react';\n\nimport CardTitle from '../components/cityNameTitle/cityNameTitle';\nimport CardDescription from '../components/currentCondition/currentCondition';\nimport CardTemperature from '../components/temperature/temperature';\n\nimport generateForecasts from './helpers/generateForecast';\n\nimport './weatherCard.scss';\n\nclass WeatherCard extends React.Component {\n  state = {\n    backgroundIsActive: false\n  };\n\n  onCardClick() {\n    this.setState({\n      backgroundIsActive: !this.state.backgroundIsActive\n    })\n  }\n\n  getCardClassNames() {\n    let classNames = 'card ';\n    if (this.state.backgroundIsActive) {\n      classNames += 'isActive';\n    }\n    return classNames;\n  }\n\n  render(props) {\n    return (\n      <div className={this.getCardClassNames()} onClick={this.onCardClick.bind(this)}>\n        <div className='cardUpperPortion' style={{\"backgroundImage\": `url(${this.props.cityImage})`}}>\n          <div className='cardInfo'>\n            <CardTemperature>\n              {this.props.temperature}\n              {this.props.minMaxTemp}\n              {this.props.maxMaxTemp}\n            </CardTemperature>\n            <CardDescription>\n              {this.props.currentCondition}\n            </CardDescription>\n          </div>\n          <CardTitle>\n            {this.props.city}\n          </CardTitle>\n        </div>\n      </div>\n    )\n  }\n};\n\nexport default WeatherCard;\n"]},"metadata":{},"sourceType":"module"}